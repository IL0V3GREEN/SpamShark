from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery, InputMedia, ReplyKeyboardRemove
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from keyboards.profile_buttons import deposit_menu
from keyboards.spamCreator_buttons import edit_sets, EditFactory, admin_spam_start, client_finish_buttons, \
    choose_theme, choose_count, admin_spam_end
from utils.check_state import check_text, check_media, check_inline
from mongo import Database
import random
from utils.profille_functions import get_rate_status, get_ref_percent, get_reqs, get_price

db = Database()
router = Router()


class UserState(StatesGroup):
    spam_theme = State()
    message_count = State()
    client_text = State()
    text = State()
    media = State()
    inline = State()


@router.message(Command(commands="spam"))
async def start_spam_creating(message: Message, state: FSMContext):
    await message.answer(
        "üåö –í—ã–±–µ—Ä–∏ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é.",
        reply_markup=choose_theme()
    )
    await state.clear()


@router.callback_query(F.data.startswith("spamtype"))
async def getting_type(call: CallbackQuery, state: FSMContext):
    theme = call.data.split("_")[1]
    await state.update_data(spam_theme=theme)
    data = await state.get_data()
    text = await check_text(data)
    media = await check_media(data)
    buttons = await check_inline(data)

    # text & media & buttons
    if text and media and buttons:
        await call.message.delete()
        await call.message.answer_photo(
            photo=data['media'],
            caption=data['text'],
            reply_markup=edit_sets(
                True, True, True, data['spam_theme'], data['message_count'], url_buttons=data['inline']
            )
        )
        await state.set_state(UserState.client_text)
    # text & media
    elif text and media and not buttons:
        await call.message.delete()
        await call.message.answer_photo(
            photo=data['media'],
            caption=data['text'],
            reply_markup=edit_sets(
                True, True, False, data['spam_theme'], data['message_count']
            )
        )
        await state.set_state(UserState.client_text)
    # text & buttons
    elif text and buttons and not media:
        await call.message.edit_text(
            data['text'],
            reply_markup=edit_sets(
                True, False, True, data['spam_theme'], data['message_count'], url_buttons=data['inline']
            )
        )
        await state.set_state(UserState.client_text)
    # media & buttons
    elif media and buttons and not text:
        await call.message.delete()
        await call.message.answer_photo(
            photo=data['media'],
            reply_markup=edit_sets(
                False, True, True, data['spam_theme'], data['message_count'], url_buttons=data['inline']
            )
        )
        await state.set_state(UserState.client_text)
    # just media
    elif media and not text and not buttons:
        await call.message.delete()
        await call.message.answer_photo(
            photo=data['media'],
            reply_markup=edit_sets(
                False, True, False, data['spam_theme'], data['message_count']
            )
        )
        await state.set_state(UserState.client_text)
    # just text
    elif text and not buttons and not media:
        await call.message.edit_text(
            data['text'],
            reply_markup=edit_sets(
                True, False, False, data['spam_theme'], data['message_count']
            )
        )
        await state.set_state(UserState.client_text)
    else:
        await call.message.edit_text(
            "üî¢ –í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
            f"<i>1 —Å–æ–æ–±—â–µ–Ω–∏–µ = <code>{get_price(db.count_rating(call.from_user.id))}</code>‚ÇΩ</i>",
            reply_markup=choose_count()
        )
        await state.set_state(UserState.message_count)


@router.callback_query(UserState.message_count, F.data.startswith("clientCount"))
async def getting_count(call: CallbackQuery, state: FSMContext):
    if call.data != "clientCount_self":
        count = int(call.data.split("_")[1])
        await state.update_data(message_count=count)
        data = await state.get_data()

        text = await check_text(data)
        media = await check_media(data)
        buttons = await check_inline(data)

        # text & media & buttons
        if text and media and buttons:
            await call.message.delete()
            await call.message.answer_photo(
                photo=data['media'],
                caption=data['text'],
                reply_markup=edit_sets(
                    True, True, True, data['spam_theme'], data['message_count'], url_buttons=data['inline']
                )
            )
            await state.set_state(UserState.client_text)
        # text & media
        elif text and media and not buttons:
            await call.message.delete()
            await call.message.answer_photo(
                photo=data['media'],
                caption=data['text'],
                reply_markup=edit_sets(
                    True, True, False, data['spam_theme'], data['message_count']
                )
            )
            await state.set_state(UserState.client_text)
        # text & buttons
        elif text and buttons and not media:
            await call.message.edit_text(
                data['text'],
                reply_markup=edit_sets(
                    True, False, True, data['spam_theme'], data['message_count'], url_buttons=data['inline']
                )
            )
            await state.set_state(UserState.client_text)
        # media & buttons
        elif media and buttons and not text:
            await call.message.delete()
            await call.message.answer_photo(
                photo=data['media'],
                reply_markup=edit_sets(
                    False, True, True, data['spam_theme'], data['message_count'], url_buttons=data['inline']
                )
            )
            await state.set_state(UserState.client_text)
        # just media
        elif media and not text and not buttons:
            await call.message.delete()
            await call.message.answer_photo(
                photo=data['media'],
                reply_markup=edit_sets(
                    False, True, False, data['spam_theme'], data['message_count']
                )
            )
            await state.set_state(UserState.client_text)
        # just text
        elif text and not buttons and not media:
            await call.message.edit_text(
                data['text'],
                reply_markup=edit_sets(
                    True, False, False, data['spam_theme'], data['message_count']
                )
            )
            await state.set_state(UserState.client_text)

        else:
            await call.message.edit_text(
                "–û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É —Ç–æ, —á—Ç–æ –±—É–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
                "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Å–µ, —á—Ç–æ —É–≥–æ–¥–Ω–æ - —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ."
            )
            await state.set_state(UserState.client_text)

    else:
        await call.message.edit_text(
            "üìù –í–≤–µ–¥–∏ —Å–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: \n\n"
            f"<i>1 —Å–æ–æ–±—â–µ–Ω–∏–µ = <code>{get_price(db.count_rating(call.from_user.id))}</code>‚ÇΩ</i>"
        )


@router.message(UserState.message_count, F.text)
async def getting_self_count(message: Message, state: FSMContext, bot: Bot):
    if message.text != "/profile":
        count = message.text
        try:
            count = int(count)
            if count <= 10000:
                await bot.delete_message(message.chat.id, message.message_id - 1)
                await state.update_data(message_count=count)
                data = await state.get_data()

                text = await check_text(data)
                media = await check_media(data)
                buttons = await check_inline(data)

                # text & media & buttons
                if text and media and buttons:
                    await message.delete()
                    await message.answer_photo(
                        photo=data['media'],
                        caption=data['text'],
                        reply_markup=edit_sets(
                            True, True, True, data['spam_theme'], data['message_count'], url_buttons=data['inline']
                        )
                    )
                    await state.set_state(UserState.client_text)
                # text & media
                elif text and media and not buttons:
                    await message.delete()
                    await message.answer_photo(
                        photo=data['media'],
                        caption=data['text'],
                        reply_markup=edit_sets(
                            True, True, False, data['spam_theme'], data['message_count']
                        )
                    )
                    await state.set_state(UserState.client_text)
                # text & buttons
                elif text and buttons and not media:
                    await message.edit_text(
                        data['text'],
                        reply_markup=edit_sets(
                            True, False, True, data['spam_theme'], data['message_count'], url_buttons=data['inline']
                        )
                    )
                    await state.set_state(UserState.client_text)
                # media & buttons
                elif media and buttons and not text:
                    await message.delete()
                    await message.answer_photo(
                        photo=data['media'],
                        reply_markup=edit_sets(
                            False, True, True, data['spam_theme'], data['message_count'], url_buttons=data['inline']
                        )
                    )
                    await state.set_state(UserState.client_text)
                # just media
                elif media and not text and not buttons:
                    await message.delete()
                    await message.answer_photo(
                        photo=data['media'],
                        reply_markup=edit_sets(
                            False, True, False, data['spam_theme'], data['message_count']
                        )
                    )
                    await state.set_state(UserState.client_text)
                # just text
                elif text and not buttons and not media:
                    await message.edit_text(
                        data['text'],
                        reply_markup=edit_sets(
                            True, False, False, data['spam_theme'], data['message_count']
                        )
                    )
                    await state.set_state(UserState.client_text)

                else:
                    await message.answer(
                        "–û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É —Ç–æ, —á—Ç–æ –±—É–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
                        "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Å–µ, —á—Ç–æ —É–≥–æ–¥–Ω–æ - —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ"
                    )
                    await state.set_state(UserState.client_text)
            else:
                await message.answer("üìõ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - 10.000")

        except ValueError:
            await message.answer(
                "üìõ –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."
            )

    else:
        await message.answer("üîö –¢—ã –≤—ã—à–µ–ª –∏–∑ —Å–ø–∞–º-–±–∏–ª–¥–µ—Ä–∞.")
        await message.answer(
            f"ü•∑üèª <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!</b>\n"
            f"‚îú üÜî<b>:</b> <code>{message.from_user.id}</code>\n"
            f"‚îú üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã:</b> <code>{get_reqs(message.from_user.id)}</code>\n"
            f"‚îî üßä <b>–ë–∞–ª–∞–Ω—Å:</b> <code>{db.user_info(message.from_user.id)['balance']:.1f}</code>‚ÇΩ\n\n"
            f"üì¶ <b>–ó–∞–∫–∞–∑—ã</b>\n"
            f"‚îú <b>–°–µ–≥–æ–¥–Ω—è:</b> <code>{db.count_today(message.from_user.id)}</code>\n"
            f"‚îú <b>–ó–∞ 7 –¥–Ω–µ–π:</b> <code>{db.count_week(message.from_user.id)}</code>\n"
            f"‚îú <b>–ó–∞ 30 –¥–Ω–µ–π:</b> <code>{db.count_month(message.from_user.id)}</code>\n"
            f"‚îú <b>–í—Å–µ–≥–æ:</b> <code>{len(list(db.orders.find({'user_id': message.from_user.id})))}</code>\n"
            f"‚îî üì¨ <b>–°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> <code>{db.count_all_messages(message.from_user.id)}</code>\n\n"
            f"üí• <b>–†–µ–π—Ç–∏–Ω–≥</b>\n"
            f"‚îú üÉè <b>–°—Ç–∞—Ç—É—Å:</b> <code>{get_rate_status(db.count_rating(message.from_user.id))}</code>\n"
            f"‚îî üèÜ <b>–ö—É–±–∫–æ–≤:</b> <code>{db.count_rating(message.from_user.id)}</code>\n\n"
            f"ü§ù <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n"
            f"‚îú üë• <b>–†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> <code>{db.count_referrals(message.from_user.id)}</code>\n"
            f"‚îî üí≤ <b>–ü—Ä–æ—Ü–µ–Ω—Ç:</b> <code>{get_ref_percent(db.count_rating(message.from_user.id))}</code>%",
            reply_markup=deposit_menu(message.from_user.id)
        )
        await state.clear()


@router.message(UserState.client_text, F.photo | F.video)
async def getting_text(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()

    text = await check_text(data)
    buttons = await check_inline(data)

    await bot.delete_message(message.chat.id, message.message_id - 1)
    if text and buttons:
        try:
            await message.answer_photo(
                message.photo[0].file_id,
                caption=data['text'],
                reply_markup=edit_sets(
                    True,
                    True,
                    True,
                    data['spam_theme'],
                    data['message_count'],
                    data['inline']
                )
            )
            await state.update_data(media=message.photo[0].file_id)
        except AttributeError:
            await message.answer(
                "üòï –í–∏–¥–µ–æ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Å–ø–∞–º-—Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            )
    elif text and not buttons:
        try:
            await message.answer_photo(
                message.photo[0].file_id,
                caption=data['text'],
                reply_markup=edit_sets(
                    True,
                    True,
                    False,
                    data['spam_theme'],
                    data['message_count']
                )
            )
            await state.update_data(media=message.photo[0].file_id)
        except AttributeError:
            await message.answer(
                "üòï –í–∏–¥–µ–æ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Å–ø–∞–º-—Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            )

    elif not text and buttons:
        try:
            await message.answer_photo(
                message.photo[0].file_id,
                reply_markup=edit_sets(
                    False,
                    True,
                    True,
                    data['spam_theme'],
                    data['message_count'],
                    data['inline']
                )
            )
            await state.update_data(media=message.photo[0].file_id)
        except AttributeError:
            await message.answer(
                "üòï –í–∏–¥–µ–æ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Å–ø–∞–º-—Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            )
    else:
        try:
            await message.answer_photo(
                message.photo[0].file_id,
                reply_markup=edit_sets(
                    False,
                    True,
                    False,
                    data['spam_theme'],
                    data['message_count']
                )
            )
            await state.update_data(media=message.photo[0].file_id)
        except AttributeError:
            await message.answer(
                "üòï –í–∏–¥–µ–æ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Å–ø–∞–º-—Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            )
    await state.set_state(UserState.client_text)


@router.message(UserState.client_text, F.text)
async def getting_text(message: Message, state: FSMContext, bot: Bot):
    if message.text != '/profile':
        data = await state.get_data()

        media = await check_media(data)
        buttons = await check_inline(data)

        await bot.delete_message(message.chat.id, message.message_id - 1)
        if media and buttons:
            await message.answer_photo(
                photo=data['media'],
                caption=message.text,
                reply_markup=edit_sets(
                    True, True, True, data['spam_theme'], data['message_count'], data['inline']
                )
            )
            await state.update_data(text=message.text)

        elif media and not buttons:
            await message.answer_photo(
                photo=data['media'],
                caption=message.text,
                reply_markup=edit_sets(
                    True, True, False, data['spam_theme'], data['message_count']
                )
            )
            await state.update_data(text=message.text)
        elif not media and buttons:
            await message.answer(
                message.text,
                reply_markup=edit_sets(
                    True, False, True, data['spam_theme'], data['message_count'], data['inline']
                )
            )
            await state.update_data(text=message.text)

        elif not media and not buttons:
            await message.answer(
                message.text,
                reply_markup=edit_sets(
                    True, False, False, data['spam_theme'], data['message_count']
                )
            )
            await state.update_data(text=message.text)

    else:
        await bot.delete_message(message.chat.id, message.message_id - 2)
        await bot.delete_message(message.chat.id, message.message_id - 1)
        await message.answer("üîö –¢—ã –≤—ã—à–µ–ª –∏–∑ —Å–ø–∞–º-–±–∏–ª–¥–µ—Ä–∞.")
        await message.answer(
            f"ü•∑üèª <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!</b>\n"
            f"‚îú üÜî<b>:</b> <code>{message.from_user.id}</code>\n"
            f"‚îú üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã:</b> <code>{get_reqs(message.from_user.id)}</code>\n"
            f"‚îî üßä <b>–ë–∞–ª–∞–Ω—Å:</b> <code>{db.user_info(message.from_user.id)['balance']:.1f}</code>‚ÇΩ\n\n"
            f"üì¶ <b>–ó–∞–∫–∞–∑—ã</b>\n"
            f"‚îú <b>–°–µ–≥–æ–¥–Ω—è:</b> <code>{db.count_today(message.from_user.id)}</code>\n"
            f"‚îú <b>–ó–∞ 7 –¥–Ω–µ–π:</b> <code>{db.count_week(message.from_user.id)}</code>\n"
            f"‚îú <b>–ó–∞ 30 –¥–Ω–µ–π:</b> <code>{db.count_month(message.from_user.id)}</code>\n"
            f"‚îú <b>–í—Å–µ–≥–æ:</b> <code>{len(list(db.orders.find({'user_id': message.from_user.id})))}</code>\n"
            f"‚îî üì¨ <b>–°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> <code>{db.count_all_messages(message.from_user.id)}</code>\n\n"
            f"üí• <b>–†–µ–π—Ç–∏–Ω–≥</b>\n"
            f"‚îú üÉè <b>–°—Ç–∞—Ç—É—Å:</b> <code>{get_rate_status(db.count_rating(message.from_user.id))}</code>\n"
            f"‚îî üèÜ <b>–ö—É–±–∫–æ–≤:</b> <code>{db.count_rating(message.from_user.id)}</code>\n\n"
            f"ü§ù <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n"
            f"‚îú üë• <b>–†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> <code>{db.count_referrals(message.from_user.id)}</code>\n"
            f"‚îî üí≤ <b>–ü—Ä–æ—Ü–µ–Ω—Ç:</b> <code>{get_ref_percent(db.count_rating(message.from_user.id))}</code>%",
            reply_markup=deposit_menu(message.from_user.id)
        )
        await state.clear()


@router.callback_query(EditFactory.filter(F.action.startswith("text")))
async def text_editing(call: CallbackQuery, callback_data: EditFactory, state: FSMContext):
    data = await state.get_data()
    action = callback_data.action.split("_")[1]
    if action == "add":
        await call.message.delete()
        await call.message.answer("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç:")

    elif action == "delete":
        if callback_data.media and callback_data.url:
            media = InputMedia(
                type='photo',
                media=f"{data['media']}"
            )
            await call.message.edit_media(
                media,
                reply_markup=edit_sets(
                    False,
                    True,
                    True,
                    data['spam_theme'],
                    data['message_count'],
                    data['inline']
                )
            )
        elif callback_data.media and not callback_data.url:
            media = InputMedia(
                type='photo',
                media=f"{data['media']}"
            )
            await call.message.edit_media(
                media,
                reply_markup=edit_sets(
                    False,
                    True,
                    False,
                    data['spam_theme'],
                    data['message_count']
                )
            )

        elif not callback_data.media:
            await call.message.delete()
            await call.message.answer(
                "–û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É —Ç–æ, —á—Ç–æ –±—É–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
                "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Å–µ, —á—Ç–æ —É–≥–æ–¥–Ω–æ - —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ"
            )
    await state.update_data(text="")


@router.callback_query(EditFactory.filter(F.action.startswith("media")))
async def text_editing(call: CallbackQuery, callback_data: EditFactory, state: FSMContext):
    data = await state.get_data()
    action = callback_data.action.split("_")[1]
    if action == "add":
        await call.message.edit_text("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")

    elif action == "delete":
        if callback_data.text and callback_data.url:
            await call.message.delete()
            await call.message.answer(
                data['text'],
                reply_markup=edit_sets(
                    True, False, True, data['spam_theme'], data['message_count'], url_buttons=data['inline']
                )
            )
        elif callback_data.text and not callback_data.url:
            await call.message.delete()
            await call.message.answer(
                data['text'],
                reply_markup=edit_sets(True, False, False, data['spam_theme'], data['message_count'])
            )

        elif not callback_data.text:
            await call.message.delete()
            await call.message.answer(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Ç–æ, —á—Ç–æ –±—É–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
                "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Å–µ, —á—Ç–æ —É–≥–æ–¥–Ω–æ - —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ"
            )
    await state.update_data(media="")


@router.callback_query(EditFactory.filter(F.action.startswith("url")))
async def text_editing(call: CallbackQuery, callback_data: EditFactory, state: FSMContext):
    data = await state.get_data()
    action = callback_data.action.split("_")[1]
    if action == "add":
        builder = ReplyKeyboardBuilder()
        builder.button(text="–û—Ç–º–µ–Ω–∞")
        await call.message.delete()
        await call.message.answer(
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–ø–∏—Å–æ–∫ URL-–∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ —ç—Ç–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É:\n\n"
            "<code>–ö–Ω–æ–ø–∫–∞ 1 - http://example1.com\n–ö–Ω–æ–ø–∫–∞ 2 - http://example2.com</code>",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
        await state.set_state(UserState.inline)

    elif action == "delete":
        if callback_data.text and callback_data.media:
            await call.message.edit_reply_markup(
                reply_markup=edit_sets(True, True, False, data['spam_theme'], data['message_count'])
            )
        elif callback_data.text and not callback_data.media:
            await call.message.edit_reply_markup(
                reply_markup=edit_sets(True, False, False, data['spam_theme'], data['message_count'])
            )

        elif not callback_data.text and callback_data.media:
            await call.message.edit_reply_markup(
                reply_markup=edit_sets(False, True, False, data['spam_theme'], data['message_count'])
            )
    await state.update_data(inline="")


@router.message(UserState.inline, F.text)
async def getting_inline_buttons(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    text = await check_text(data)
    media = await check_media(data)

    await bot.delete_message(message.chat.id, message.message_id - 1)
    if message.text != "–û—Ç–º–µ–Ω–∞":
        links = message.text.split("\n")
        await state.update_data(inline=links)
        await message.answer("URL-–∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.", reply_markup=ReplyKeyboardRemove())
        await bot.delete_message(message.chat.id, message.message_id + 1)
        if media and text:
            try:
                await message.answer_photo(
                    photo=f"{data['media']}",
                    caption=f"{data['text']}",
                    reply_markup=edit_sets(
                        True, True, True, data['spam_theme'], data['message_count'], url_buttons=links
                    )
                )
                await state.set_state(UserState.client_text)
            except IndexError:
                await message.answer(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π —ç—Ç–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É:\n\n"
                    "<code>–ö–Ω–æ–ø–∫–∞ 1 - http://example1.com\n"
                    "–ö–Ω–æ–ø–∫–∞ 2 - http://example2.com</code>"
                )

        elif media and not text:
            try:
                await message.answer_photo(
                    photo=data['media'],
                    reply_markup=edit_sets(
                        False, True, True, data['spam_theme'], data['message_count'], url_buttons=links
                    )
                )
                await state.set_state(UserState.client_text)
            except IndexError:
                await message.answer(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π —ç—Ç–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É:\n\n"
                    "<code>–ö–Ω–æ–ø–∫–∞ 1 - http://example1.com\n"
                    "–ö–Ω–æ–ø–∫–∞ 2 - http://example2.com</code>"
                )

        elif not media and text:
            try:
                await message.answer(
                    data['text'],
                    reply_markup=edit_sets(
                        True, False, True, data['spam_theme'], data['message_count'], url_buttons=links
                    )
                )
                await state.set_state(UserState.client_text)
            except IndexError:
                await message.answer(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π —ç—Ç–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É:\n\n"
                    "<code>–ö–Ω–æ–ø–∫–∞ 1 - http://example1.com\n"
                    "–ö–Ω–æ–ø–∫–∞ 2 - http://example2.com</code>"
                )
    else:
        await message.answer("–û—Ç–º–µ–Ω–∞..", reply_markup=ReplyKeyboardRemove())
        await bot.delete_message(message.chat.id, message.message_id + 1)

        if media and text:
            await message.answer_photo(
                photo=f"{data['media']}",
                caption=f"{data['text']}",
                reply_markup=edit_sets(True, True, False, data['spam_theme'], data['message_count'])
            )
            await state.set_state(UserState.client_text)

        elif media and not text:
            await message.answer_photo(
                photo=data['media'],
                reply_markup=edit_sets(False, True, False, data['spam_theme'], data['message_count'])
            )
            await state.set_state(UserState.client_text)

        elif text and not media:
            await message.answer(
                data['text'],
                reply_markup=edit_sets(True, False, False, data['spam_theme'], data['message_count'])
            )
            await state.set_state(UserState.client_text)


@router.callback_query(F.data.startswith("spambuild"))
async def editing_buttons(call: CallbackQuery, state: FSMContext):
    action = call.data.split("_")[1]
    if action == "theme":
        await call.message.delete()
        await call.message.answer(
            "üåö –í—ã–±–µ—Ä–∏ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é.",
            reply_markup=choose_theme()
        )
    elif action == "count":
        await call.message.delete()
        await call.message.answer(
            "üî¢ –í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
            f"<i>1 —Å–æ–æ–±—â–µ–Ω–∏–µ = <code>{get_price(db.count_rating(call.from_user.id))}</code>‚ÇΩ</i>",
            reply_markup=choose_count()
        )
        await state.set_state(UserState.message_count)


@router.callback_query(EditFactory.filter(F.action == "finish"))
async def setup_complete(call: CallbackQuery, state: FSMContext, callback_data: EditFactory, bot: Bot):
    data = await state.get_data()

    if db.user_info(call.from_user.id)['balance'] >= (data['message_count'] * get_price(db.count_rating(call.from_user.id))):
        number = random.randint(0, 9999)
        db.create_spam_order(number, call.from_user.id, data['message_count'], data['spam_theme'])
        db.update_string(
            call.from_user.id,
            {'balance': (db.user_info(call.from_user.id)['balance'] - (data['message_count'] * db.get_current_price()))}
        )

        if callback_data.text and callback_data.media and callback_data.url:
            media = InputMedia(
                type="photo",
                media=f"{data['media']}",
                caption=f"{data['text']}\n"
                        f"-----------------------------------\n"
                        f"<b>#{number}\n\n</b>"
                        f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {data['spam_theme']}\n"
                        f"–ö–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {data['message_count']}\n\n"
                        f"<i>‚ôªÔ∏è –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞</i>\n"

            )
            await call.message.edit_media(
                media,
                reply_markup=client_finish_buttons(data['inline'])
            )
            await bot.send_photo(
                chat_id=6364771832,
                photo=data['media'],
                caption=f"{data['text']}\n"
                        f"-----------------------------------\n"
                        f"<b>#{number}\n\n</b>"
                        f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {data['spam_theme']}\n"
                        f"–ö–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {data['message_count']}\n\n"
                        f"message_id: <code>{call.message.message_id + 2}</code>",
                reply_markup=admin_spam_start(
                    call.from_user.id,
                    number,
                    data['inline'])
            )

        elif callback_data.text and callback_data.media and not callback_data.url:
            media = InputMedia(
                type="photo",
                media=f"{data['media']}",
                caption=f"{data['text']}\n"
                        f"-----------------------------------\n"
                        f"<b>#{number}\n\n</b>"
                        f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {data['spam_theme']}\n"
                        f"–ö–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {data['message_count']}\n\n"
                        f"<i>‚ôªÔ∏è –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞</i>\n"
            )
            await call.message.edit_media(media)
            await bot.send_photo(
                chat_id=6364771832,
                photo=data['media'],
                caption=f"{data['text']}\n"
                        f"-----------------------------------\n"
                        f"<b>#{number}\n\n</b>"
                        f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {data['spam_theme']}\n"
                        f"–ö–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {data['message_count']}\n\n"
                        f"message_id: <code>{call.message.message_id + 2}</code>",
                reply_markup=admin_spam_start(
                    call.from_user.id,
                    number
                )
            )

        elif callback_data.text and callback_data.url and not callback_data.media:
            await call.message.edit_text(
                f"{data['text']}\n"
                f"-----------------------------------\n"
                f"<b>#{number}\n\n</b>"
                f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {data['spam_theme']}\n"
                f"–ö–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {data['message_count']}\n\n"
                f"<i>‚ôªÔ∏è –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞</i>\n",
                reply_markup=client_finish_buttons(data['inline'])
            )
            await bot.send_message(
                6364771832,
                f"{data['text']}\n"
                f"-----------------------------------\n"
                f"<b>#{number}\n\n</b>"
                f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {data['spam_theme']}\n"
                f"–ö–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {data['message_count']}\n\n"
                f"message_id: <code>{call.message.message_id + 2}</code>",
                reply_markup=admin_spam_start(
                    call.from_user.id,
                    number,
                    data['inline'])
            )

        elif callback_data.media and callback_data.url and not callback_data.text:
            media = InputMedia(
                type="photo",
                media=f"{data['media']}",
                caption=f"<b>#{number}\n\n</b>"
                        f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {data['spam_theme']}\n"
                        f"–ö–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {data['message_count']}\n\n"
                        f"<i>‚ôªÔ∏è –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞</i>\n"
            )
            await call.message.edit_media(media, reply_markup=data['inline'])
            await bot.send_photo(
                chat_id=6364771832,
                photo=data['media'],
                caption=f"<b>#{number}\n\n</b>"
                        f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {data['spam_theme']}\n"
                        f"–ö–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {data['message_count']}\n\n"
                        f"message_id: <code>{call.message.message_id + 2}</code>",
                reply_markup=admin_spam_start(
                    call.from_user.id,
                    number,
                    data['inline'])
            )

        elif callback_data.media and not callback_data.text and not callback_data.url:
            media = InputMedia(
                type="photo",
                media=f"{data['media']}",
                caption=f"<b>#{number}\n\n</b>"
                        f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {data['spam_theme']}\n"
                        f"–ö–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {data['message_count']}\n\n"
                        f"<i>‚ôªÔ∏è –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞</i>\n"
            )
            await call.message.edit_media(media)
            await bot.send_photo(
                chat_id=6364771832,
                photo=data['media'],
                caption=f"<b>#{number}\n\n</b>"
                        f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {data['spam_theme']}\n"
                        f"–ö–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {data['message_count']}\n\n"
                        f"message_id: <code>{call.message.message_id + 2}</code>",
                reply_markup=admin_spam_start(
                    call.from_user.id,
                    number
                )
            )

        elif callback_data.text and not callback_data.media and not callback_data.url:
            await call.message.edit_text(
                f"{data['text']}\n"
                f"-----------------------------------\n"
                f"<b>#{number}\n\n</b>"
                f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {data['spam_theme']}\n"
                f"–ö–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {data['message_count']}\n\n"
                f"<i>‚ôªÔ∏è –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞</i>\n"
            )
            await bot.send_message(
                6364771832,
                f"{data['text']}\n"
                f"-----------------------------------\n"
                f"<b>#{number}\n\n</b>"
                f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {data['spam_theme']}\n"
                f"–ö–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {data['message_count']}\n\n"
                f"message_id: <code>{call.message.message_id + 2}</code>",
                reply_markup=admin_spam_start(
                    call.from_user.id,
                    number
                )
            )

        await state.clear()

    else:
        await call.message.answer(
            f"üìõ –ù–∞ —Ç–≤–æ–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\n\n"
            f"–ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å - /profile –∏–ª–∏ –∏–∑–º–µ–Ω–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π."
        )


@router.callback_query(F.data == "exitFromBuilder")
async def exiting_from_builder(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer(
        "üîö –¢—ã –≤—ã—à–µ–ª –∏–∑ —Å–ø–∞–º-–±–∏–ª–¥–µ—Ä–∞.\n\n"
        '<i>–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ <b>SpamShark</b> –µ—â–µ —Ä–∞–∑, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <b>"–ú–µ–Ω—é"</b></i>\n\n'
    )
    await state.clear()


@router.callback_query(F.data.startswith("startspam"))
async def starting_spam(call: CallbackQuery, bot: Bot):
    user_id = int(call.data.split("_")[1])
    order_id = int(call.data.split("_")[2])
    order = db.get_order_info(order_id)
    await call.message.edit_reply_markup(reply_markup=admin_spam_end())

    await bot.send_message(
        user_id,
        f"<b>#{order_id}\n\n</b>"
        f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {order['theme']}\n"
        f"–ö–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {order['messages']}\n\n"
        f"üì¨ –ò–¥–µ—Ç —Å–ø–∞–º-—Ä–∞—Å—Å—ã–ª–∫–∞.. 0%"
    )


@router.callback_query(F.data == "endSpam")
async def end_spamming(call: CallbackQuery):
    await call.message.delete()

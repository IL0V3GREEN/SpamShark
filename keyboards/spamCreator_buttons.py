from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData
from mongo import Database
from utils.profille_functions import get_price

db = Database()


class EditFactory(CallbackData, prefix="editfab"):
    action: str
    url: bool
    text: bool
    media: bool


def edit_sets(
        user_id: int, text: bool, media: bool, url: bool, theme: str, count: int, url_buttons: list or None = None
):
    builder = InlineKeyboardBuilder()
    if url is True:
        if url_buttons is not None:
            for i in url_buttons:
                builder.button(
                    text=f"{(i.split('-')[0])[:-1]}",
                    url=f"{(i.split('-')[1])[1:]}"
                )
    if not text:
        builder.button(
            text="–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç",
            callback_data=EditFactory(action="text_add", text=text, url=url, media=media)
        )
    if text:
        builder.button(
            text="–£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—Å—Ç",
            callback_data=EditFactory(action="text_delete", text=text, url=url, media=media)
        )
    if not media:
        builder.button(
            text="–î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª",
            callback_data=EditFactory(action="media_add", text=text, url=url, media=media)
        )
    if media:
        builder.button(
            text="–£–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª",
            callback_data=EditFactory(action="media_delete", text=text, url=url, media=media)
        )
    if not url:
        builder.button(
            text="–î–æ–±–∞–≤–∏—Ç—å URL-–∫–Ω–æ–ø–∫–∏",
            callback_data=EditFactory(action="url_add", text=text, url=url, media=media)
        )
    if url:
        builder.button(
            text="–£–¥–∞–ª–∏—Ç—å URL-–∫–Ω–æ–ø–∫–∏",
            callback_data=EditFactory(action="url_delete", text=text, url=url, media=media)
        )

    builder.button(
        text=f"–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {theme}",
        callback_data="spambuild_theme"
    )
    builder.button(
        text=f"–ö–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {count} ({get_price(db.count_rating(user_id)) * count}‚ÇΩ)",
        callback_data="spambuild_count"
    )
    builder.button(
        text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
        callback_data=EditFactory(action="finish", text=text, url=url, media=media)
    )
    builder.button(
        text="üîô –í—ã–π—Ç–∏",
        callback_data="exitFromBuilder"
    )
    builder.adjust(1)
    return builder.as_markup()


def client_finish_buttons(url: list):
    builder = InlineKeyboardBuilder()
    for i in url:
        builder.button(
            text=f"{(i.split('-')[0])[:-1]}",
            url=f"{(i.split('-')[1])[1:]}"
        )
    builder.adjust(1)
    return builder.as_markup()


def admin_spam_start():
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å —Å–ø–∞–º–∏—Ç—å",
        callback_data=f"startspam"
    )
    builder.adjust(1)
    return builder.as_markup()


def admin_spam_end():
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–°–ø–∞–º-—Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        callback_data=f"endSpam"
    )
    return builder.as_markup()


def choose_theme():
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üè¶ –§–∏–Ω–∞–Ω—Å—ã & –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞",
        callback_data="spamtype_finance&crypto"
    )
    builder.button(
        text="ü§† –Æ–º–æ—Ä –∏ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
        callback_data="spamtype_humor&games"
    )
    builder.button(
        text="üé≠ –ü–æ–ª–∏—Ç–∏–∫–∞",
        callback_data="spamtype_politics"
    )
    builder.button(
        text="üß¨ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
        callback_data="spamtype_tech"
    )
    builder.button(
        text="üíä –ú–µ–¥–∏—Ü–∏–Ω–∞",
        callback_data="spamtype_medicine"
    )
    builder.button(
        text="üîû Dating & Porn",
        callback_data="spamtype_adult"
    )
    builder.button(
        text="üåê –î–∞—Ä–∫–Ω–µ—Ç",
        callback_data="spamtype_darknet"
    )
    builder.button(
        text="‚û°Ô∏è Skip",
        callback_data="spamtype_skipped"
    )
    builder.adjust(1)
    return builder.as_markup()


def choose_count():
    builder = InlineKeyboardBuilder()
    builder.button(
        text="100",
        callback_data="clientCount_100"
    )
    builder.button(
        text="500",
        callback_data="clientCount_500"
    )
    builder.button(
        text="1000",
        callback_data="clientCount_1000"
    )
    builder.button(
        text="2000",
        callback_data="clientCount_2000"
    )
    builder.button(
        text="4000",
        callback_data="clientCount_4000"
    )
    builder.button(
        text="6000",
        callback_data="clientCount_6000"
    )
    builder.button(
        text="8000",
        callback_data="clientCount_8000"
    )
    builder.button(
        text="10000",
        callback_data="clientCount_10000"
    )
    builder.button(
        text="‚úèÔ∏è –°–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        callback_data="clientCount_self"
    )
    builder.adjust(2)
    return builder.as_markup()

